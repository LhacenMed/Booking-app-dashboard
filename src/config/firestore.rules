rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Rules for transportation_companies collection
    match /transportation_companies/{companyId} {
      // Allow reading transportation companies for authenticated users
      allow read: if request.auth != null;
      // Only allow write operations by admin
      allow write: if false;
    }

    // Rules for checked_emails collection
    match /checked_emails/{docId} {
      // Function to validate document ID format (random8chars_email)
      function isValidDocId() {
        let parts = docId.split('_');
        return parts.size() == 2 && 
               parts[0].matches('^[A-Za-z0-9]{8}$') && // 8-character alphanumeric
               parts[1].matches('^[^@]+@[^@]+\\.[^@]+$'); // Basic email format
      }

      // Allow creating and updating email verification results
      allow create, update: if
        isValidDocId() &&
        request.resource.data.keys().hasAll(['email', 'isValid', 'checkedAt', 'verificationData']) &&
        request.resource.data.email == docId.split('_')[1];
      
      // Allow reading email verification results
      allow read: if true;
    }

    // Rules for agencies collection
    match /agencies/{companyId} {
      // Allow reading company documents
      allow read: if true;
      
      // Allow creating new company documents during signup
      allow create: if 
        request.resource.data.keys().hasAll(['email', 'createdAt']);
      
      // Allow updating company documents during signup and after auth
      allow update: if
        true;

      // Allow deletion during verification process
      allow delete: if
        !resource.data.keys().hasAny(['authUID']);

      // Rules for the email_verification_token subcollection
      match /email_verification_token/{tokenId} {
        // Allow all operations on verification tokens during signup
        allow read, write: if true;
      }
      
      // Rules for other subcollections (trips, seats, etc.)
      match /{subcollection}/{document} {
        allow read, write: if
          request.auth != null &&
          get(/databases/$(database)/documents/agencies/$(companyId)).data.authUID == request.auth.uid;
      }
    }
  }
} 